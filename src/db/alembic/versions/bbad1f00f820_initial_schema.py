"""initial schema

Revision ID: bbad1f00f820
Revises: 
Create Date: 2025-05-26 18:27:19.468231

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bbad1f00f820'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('primary_email', sa.String(), nullable=False),
    sa.Column('primary_email_verified', sa.Boolean(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_index(op.f('ix_user_phone_number'), 'user', ['phone_number'], unique=True)
    op.create_index(op.f('ix_user_primary_email'), 'user', ['primary_email'], unique=True)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=False)
    op.create_table('restaurant_table',
    sa.Column('table_number', sa.String(length=10), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=False),
    sa.Column('location', sa.String(length=32), nullable=True),
    sa.Column('is_occupied', sa.Boolean(), nullable=False),
    sa.Column('occupied_by', sa.UUID(), nullable=True),
    sa.Column('occupied_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('capacity >= 1', name='ck_table_capacity_positive'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_restaurant_table_id'), 'restaurant_table', ['id'], unique=False)
    op.create_index(op.f('ix_restaurant_table_table_number'), 'restaurant_table', ['table_number'], unique=True)

    op.create_table('customer',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('table_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('menu_category',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_menu_category_id'), 'menu_category', ['id'], unique=False)
    
    op.create_table('admin',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('kitchen_staff',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('station', sa.String(length=32), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('menu_item',
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('price >= 0'),
    sa.ForeignKeyConstraint(['category_id'], ['menu_category.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_menu_item_category_id'), 'menu_item', ['category_id'], unique=False)
    op.create_index(op.f('ix_menu_item_id'), 'menu_item', ['id'], unique=False)
    op.create_table('waiter',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order',
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('waiter_id', sa.UUID(), nullable=False),
    sa.Column('kitchen_staff_id', sa.UUID(), nullable=False),
    sa.Column('table_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('NEW', 'IN_PROGRESS', 'READY', 'SERVED', 'PAID', 'CANCELED', name='orderstatus', native_enum=False), nullable=False),
    sa.Column('special_request', sa.String(length=255), nullable=False),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('is_paid', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('total_amount >= 0'),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['kitchen_staff_id'], ['kitchen_staff.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['table_id'], ['restaurant_table.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['waiter_id'], ['waiter.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_id'), 'order', ['id'], unique=False)
    op.create_table('waiter_table_link',
    sa.Column('waiter_id', sa.UUID(), nullable=False),
    sa.Column('table_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['table_id'], ['restaurant_table.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['waiter_id'], ['waiter.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('waiter_id', 'table_id')
    )
    op.create_table('order_item',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('menu_item_id', sa.UUID(), nullable=True),
    sa.Column('item_name', sa.String(length=100), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('quantity >= 1'),
    sa.CheckConstraint('unit_price >= 0'),
    sa.ForeignKeyConstraint(['menu_item_id'], ['menu_item.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_foreign_key(
        "fk_customer_table", "customer", "restaurant_table",
        ["table_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        "fk_table_occupied_by", "restaurant_table", "customer",
        ["occupied_by"], ["id"], ondelete="SET NULL"
    )
    op.create_index(op.f('ix_order_item_id'), 'order_item', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_order_item_id'), table_name='order_item')
    op.drop_table('order_item')
    op.drop_table('waiter_table_link')
    op.drop_index(op.f('ix_order_id'), table_name='order')
    op.drop_table('order')
    op.drop_table('waiter')
    op.drop_index(op.f('ix_menu_item_id'), table_name='menu_item')
    op.drop_index(op.f('ix_menu_item_category_id'), table_name='menu_item')
    op.drop_table('menu_item')
    op.drop_table('kitchen_staff')
    op.drop_table('admin')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_primary_email'), table_name='user')
    op.drop_index(op.f('ix_user_phone_number'), table_name='user')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_restaurant_table_table_number'), table_name='restaurant_table')
    op.drop_index(op.f('ix_restaurant_table_id'), table_name='restaurant_table')
    op.drop_table('restaurant_table')
    op.drop_index(op.f('ix_menu_category_id'), table_name='menu_category')
    op.drop_table('menu_category')
    op.drop_table('customer')
    # ### end Alembic commands ###
